<% layout("/layouts/boilerplate") %>

<div class="row mt-3">
  <!-- Listing Title -->
  <div class="col-8 offset-3">
    <h3><b><%= listing.title %></b></h3>
  </div>

  <!-- Listing Card -->
  <div class="card col-6 offset-3 show-card listing-card">
    <% if (listing.image && listing.image.url) { %>
      <img src="<%= listing.image?.url %>" alt="Listing Image" class="card-img-top show-image" />
    <% } else { %>
      <p>No image available</p>
    <% } %>

    <!-- Listing Description and Details -->
    <div class="card-body">
      <p class="card-text">
        <p>
          Listed by:
          <% let displayedOwner; %>
          <% if (listing.owner && listing.owner.username) { %>
            <% displayedOwner = listing.owner.username; %>
          <% } %>
          <%= displayedOwner %>
        </p>
        <%= listing.description %><br />
        &#8377 <%= listing.price.toLocaleString("en-IN") %><br />
        <%= listing.location %><br />
        <%= listing.country %>
      </p>
    </div>
  </div>

  <br />

  <!-- Edit/Delete Buttons (for listing owner only) -->
  <% if (currentUser && listing.owner && currentUser._id.equals(listing.owner._id)) { %>
  <div class="btns">
    <a href="/listings/<%= listing._id %>/edit" class="btn btn-dark col-1 offset-3 edit-btn">Edit</a>
    <form method="POST" action="/listings/<%= listing._id %>?_method=DELETE">
      <button class="btn btn-dark offset-4">Delete</button>
    </form>
  </div>
  <% } %>

  <hr>

  <!-- Review Section -->
  <div class="col-8 offset-3 mb-3">
    <h3>Leave a Review:</h3>
    <form action="/listings/<%= listing._id %>/reviews" method="POST" novalidate class="needs-validation">
      <div class="mb-3 mt-3">
        <label for="rating" class="form-label">Rating</label>
      </div>
      <fieldset class="starability-slot">
        <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
        <input type="radio" id="first-rate1" name="review[rating]" value="1" />
        <label for="first-rate1" title="Terrible">1 star</label>
        <input type="radio" id="first-rate2" name="review[rating]" value="2" />
        <label for="first-rate2" title="Not good">2 stars</label>
        <input type="radio" id="first-rate3" name="review[rating]" value="3" />
        <label for="first-rate3" title="Average">3 stars</label>
        <input type="radio" id="first-rate4" name="review[rating]" value="4" />
        <label for="first-rate4" title="Very good">4 stars</label>
        <input type="radio" id="first-rate5" name="review[rating]" value="5" />
        <label for="first-rate5" title="Amazing">5 stars</label>
      </fieldset>

      <div class="mb-3 mt-3">
        <label for="comment" class="form-label">Comments</label>
        <textarea cols="30" rows="5" id="comment" name="review[comment]" class="form-control" required></textarea>
        <div class="invalid-feedback">Please add some comments for review.</div>
      </div>
      <button class="btn btn-outline-dark text-center">Submit</button>
    </form>

    <br />
    <p><b>All Reviews...</b></p>
    <div class="row">
      <% for (let review of listing.reviews) { %>
        <div class="card col-5 ms-3 mb-3">
          <div class="card-body">
            <h5 class="card-title">Mohithsai</h5>
            <p class="card-text"><%= review.comment %></p>
            <p class="starability-result" data-rating="<%= review.rating %>">
              Rated: <%= review.rating %> stars
            </p>
            <form class="mb-3" action="/listings/<%= listing._id %>/reviews/<%= review._id %>?_method=DELETE" method="POST">
              <button class="btn btn-dark btn-sm">Delete</button>
            </form>
          </div>
        </div>
      <% } %>
    </div>

    <!-- Map Section -->
    <div class="col-8 mb-3">
      <h3>Where you'll be</h3>
      <div id="map"></div>
    </div>
  </div>
</div>

<script>
  // Initialize MapTiler API key
const MAPTILER_API_KEY = 'ScHd778QMlb8vwrBdStf'; // Your MapTiler API key
const locationName = "<%= listing.location %>"; // Location passed from EJS template
const locationTitle="<%= listing.title %>";
// Initialize the map
const map = new maplibregl.Map({
  container: 'map',
  style: `https://api.maptiler.com/maps/streets/style.json?key=${MAPTILER_API_KEY}`,
  center: [77.5946, 12.9716], // Default center
  zoom: 4
});

map.addControl(new maplibregl.NavigationControl(), 'top-right');

// Marker and circle initialization
let marker = null;
let circleLayer = null;

// Function to calculate the circle radius based on zoom level
function getCircleRadius(zoomLevel) {
  const baseRadius = 5000;  // 5 km
  const scaleFactor = 1 + (zoomLevel - 12) * 0.5; // Adjust scale factor for zoom
  return baseRadius * scaleFactor;
}

// Function to add a circle around the marker
function addCircleAroundMarker(coords) {
  const radius = getCircleRadius(map.getZoom());  // Get radius based on zoom level

  // Remove existing circle layer if it exists
  if (circleLayer) {
    map.removeLayer('circle-layer');
    map.removeSource('circle');
  }

  map.addSource('circle', {
    type: 'geojson',
    data: {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: coords
      }
    }
  });

  map.addLayer({
    id: 'circle-layer',
    type: 'circle',
    source: 'circle',
    paint: {
      'circle-radius': radius / 100,  // Set circle size based on zoom
      'circle-color': 'rgba(255, 0, 0, 0.2)', // Light red color
      'circle-stroke-width': 2,
      'circle-stroke-color': 'rgba(255, 0, 0, 1)' // Red border for the circle
    }
  });
}

// Function to geocode the location and place a marker on the map
async function geocodeLocation(locationName,locationTitle) {
  try {
    const response = await fetch(`https://api.maptiler.com/geocoding/${encodeURIComponent(locationName)}.json?key=${MAPTILER_API_KEY}`);
    const data = await response.json();

    if (data.features && data.features.length > 0) {
      const coords = data.features[0].geometry.coordinates;

      // Remove existing marker if any
      if (marker) {
        marker.remove();
      }

      // Add a new marker
      marker = new maplibregl.Marker({ color: 'red' })
  .setLngLat(coords)
  .setPopup(
    new maplibregl.Popup()
      .setHTML(`
        <div style="  font-size: 18px; color: green;text-align: center;">
          <p style="font-weight: bold; font-size: 20px;  ">Location found!</p>
          <h5 style="font-size: 14px; margin: 10px 0; color:red">Place: <span style="color: black; font-size: 18px; text-align: center;">${locationTitle}</span></h5>
          <h6 style="font-size: 14px; color:red;margin-left:-10px">Location: <span style="color: black;font-size: 18px">${locationName}</span></h6>
        </div>
      `)
  )
  .addTo(map);


      // Fly to the new location
      map.flyTo({ center: coords, zoom: 10 });

      // Add a circle around the marker
      addCircleAroundMarker(coords);
    } else {
      alert("Location not found! Check listing location.");
    }
  } catch (error) {
    console.error('Geocoding error:', error);
    alert("Error fetching location!");
  }
}

// Automatically call geocode when the map is loaded
map.on('load', () => {
  if (locationName,locationTitle) {
    geocodeLocation(locationName,locationTitle); // Call the geocode function
  } else {
    alert("No location found in the listing.");
  }
});

// Listen for zoom events and update circle radius
map.on('zoom', function () {
  if (circleLayer) {
    const radius = getCircleRadius(map.getZoom()) / 0.1;
    map.setPaintProperty('circle-layer', 'circle-radius', radius);
  }
});

</script>